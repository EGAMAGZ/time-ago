name: Publish package

on:
  workflow_dispatch:

jobs:
  build-data:
    permissions:
      contents: write
    name: Generate build data
    runs-on: ubuntu-latest
    outputs:
      build_date: ${{ steps.data.outputs.builddate }}
      version: ${{ steps.data.outputs.version }}
      build_time: ${{ steps.data.outputs.buildtime }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Export release date
        id: data
        shell: bash
        run: |
          echo "builddate=$(date +"%Y-%m-%d")" >> $GITHUB_OUTPUT
          echo "version=$(date +"%Y.%m.%d")" >> $GITHUB_OUTPUT

  run-tests:
    name: Run tests
    needs: build-data
    uses: ./.github/workflows/test.yml

  check-linting:
    name: Check linting
    needs: build-data
    permissions:
      contents: read
    uses: ./.github/workflows/lint.yml

  release:
    permissions:
      contents: write
      id-token: write
    name: Create a release
    runs-on: ubuntu-latest
    needs: [build-data, run-tests, check-linting]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install jq
        run: |
          sudo apt-get update && sudo apt-get install -y jq
      - name: Update deno.json version
        run: |
          # Normalize the version by removing leading zeros from minor and patch versions
          normalized_version=$(echo "${{ needs.build-data.outputs.version }}" | sed 's/\([0-9]*\)\.0\([0-9]*\)/\1.\2/' | sed 's/\.\(0\+\)/./g')
          jq --arg version "$normalized_version" '.version = $version' deno.json > tmp.json && mv tmp.json deno.json
      - name: Commit changes
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add deno.json
          git commit -m "chore: Update version to ${{ needs.build-data.outputs.version }}"
      - name: Push changes
        run: |
          git push
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build-data.outputs.version }}
          name: "Release build - ${{ needs.build-data.outputs.version }}"
          generate_release_notes: true
          make_latest: true

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [release]

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Get the full history

      - name: Update local repository to latest commit
        run: |
          git fetch origin refs/heads/master
          git reset --hard origin/master

      - name: Publish package
        run: |
          npx jsr publish
